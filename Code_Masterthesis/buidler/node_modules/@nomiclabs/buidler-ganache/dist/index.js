"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const task_names_1 = require("@nomiclabs/buidler/builtin-tasks/task-names");
const config_1 = require("@nomiclabs/buidler/config");
const plugins_1 = require("@nomiclabs/buidler/plugins");
const debug_1 = __importDefault(require("debug"));
const log = debug_1.default("buidler:plugin:ganache");
const ganache_service_1 = require("./ganache-service");
plugins_1.ensurePluginLoadedWithUsePlugin();
function default_1() {
    config_1.task(task_names_1.TASK_TEST, async (args, env, runSuper) => {
        return handlePluginTask(args, env, runSuper);
    });
    config_1.task(task_names_1.TASK_RUN, async (args, env, runSuper) => {
        return handlePluginTask(args, env, runSuper);
    });
    config_1.extendConfig((resolvedConfig, config) => {
        const defaultOptions = ganache_service_1.GanacheService.getDefaultOptions();
        if (config.networks && config.networks.ganache) {
            const customOptions = config.networks.ganache;
            resolvedConfig.networks.ganache = Object.assign(Object.assign({}, defaultOptions), customOptions);
        }
        else {
            resolvedConfig.networks.ganache = defaultOptions;
        }
    });
}
exports.default = default_1;
async function handlePluginTask(args, env, runSuper) {
    if (env.network.name !== "ganache") {
        return runSuper();
    }
    log("Starting Ganache");
    const options = env.network.config;
    const ganacheService = await ganache_service_1.GanacheService.create(options);
    await ganacheService.startServer();
    const ret = await runSuper();
    log("Stopping Ganache");
    await ganacheService.stopServer();
    return ret;
}
//# sourceMappingURL=index.js.map